/* automatically generated by rust-bindgen */

pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
pub type Enum_Unnamed1 = ::libc::c_uint;
pub const P_ALL: ::libc::c_uint = 0;
pub const P_PID: ::libc::c_uint = 1;
pub const P_PGID: ::libc::c_uint = 2;
pub type idtype_t = Enum_Unnamed1;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed2;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed5 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __WAIT_STATUS = Union_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed8;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub __val: [::libc::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed9;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed10;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::clone::Clone for Struct___pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed11 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::clone::Clone for Struct___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutex_t = Union_Unnamed11;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed12 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed13 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed14 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed15 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed15 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed15;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed16 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed16 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed17 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __pad1: ::libc::c_ulong,
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed18 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed18 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed18;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed19 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed19 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed20 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed20 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed20;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::libc::c_int,
    pub rand_deg: ::libc::c_int,
    pub rand_sep: ::libc::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::clone::Clone for Struct_random_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_drand48_data {
    pub __x: [::libc::c_ushort; 3usize],
    pub __old_x: [::libc::c_ushort; 3usize],
    pub __c: ::libc::c_ushort,
    pub __init: ::libc::c_ushort,
    pub __a: ::libc::c_ulonglong,
}
impl ::std::clone::Clone for Struct_drand48_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::libc::c_void,
                                               arg2: *const ::libc::c_void)
                              -> ::libc::c_int>;
pub type Enum_Unnamed21 = ::libc::c_uint;
pub const UHD_ERROR_NONE: ::libc::c_uint = 0;
pub const UHD_ERROR_INVALID_DEVICE: ::libc::c_uint = 1;
pub const UHD_ERROR_INDEX: ::libc::c_uint = 10;
pub const UHD_ERROR_KEY: ::libc::c_uint = 11;
pub const UHD_ERROR_NOT_IMPLEMENTED: ::libc::c_uint = 20;
pub const UHD_ERROR_USB: ::libc::c_uint = 21;
pub const UHD_ERROR_IO: ::libc::c_uint = 30;
pub const UHD_ERROR_OS: ::libc::c_uint = 31;
pub const UHD_ERROR_ASSERTION: ::libc::c_uint = 40;
pub const UHD_ERROR_LOOKUP: ::libc::c_uint = 41;
pub const UHD_ERROR_TYPE: ::libc::c_uint = 42;
pub const UHD_ERROR_VALUE: ::libc::c_uint = 43;
pub const UHD_ERROR_RUNTIME: ::libc::c_uint = 44;
pub const UHD_ERROR_ENVIRONMENT: ::libc::c_uint = 45;
pub const UHD_ERROR_SYSTEM: ::libc::c_uint = 46;
pub const UHD_ERROR_EXCEPT: ::libc::c_uint = 47;
pub const UHD_ERROR_BOOSTEXCEPT: ::libc::c_uint = 60;
pub const UHD_ERROR_STDEXCEPT: ::libc::c_uint = 70;
pub const UHD_ERROR_UNKNOWN: ::libc::c_uint = 100;
pub type uhd_error = Enum_Unnamed21;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::clone::Clone for Struct_itimerspec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_sigevent { }
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub enum Struct_uhd_rx_metadata_t { }
pub enum Struct_uhd_tx_metadata_t { }
pub enum Struct_uhd_async_metadata_t { }
pub type uhd_rx_metadata_handle = *mut Struct_uhd_rx_metadata_t;
pub type uhd_tx_metadata_handle = *mut Struct_uhd_tx_metadata_t;
pub type uhd_async_metadata_handle = *mut Struct_uhd_async_metadata_t;
pub type Enum_Unnamed22 = ::libc::c_uint;
pub const UHD_RX_METADATA_ERROR_CODE_NONE: ::libc::c_uint = 0;
pub const UHD_RX_METADATA_ERROR_CODE_TIMEOUT: ::libc::c_uint = 1;
pub const UHD_RX_METADATA_ERROR_CODE_LATE_COMMAND: ::libc::c_uint = 2;
pub const UHD_RX_METADATA_ERROR_CODE_BROKEN_CHAIN: ::libc::c_uint = 4;
pub const UHD_RX_METADATA_ERROR_CODE_OVERFLOW: ::libc::c_uint = 8;
pub const UHD_RX_METADATA_ERROR_CODE_ALIGNMENT: ::libc::c_uint = 12;
pub const UHD_RX_METADATA_ERROR_CODE_BAD_PACKET: ::libc::c_uint = 15;
pub type uhd_rx_metadata_error_code_t = Enum_Unnamed22;
pub type Enum_Unnamed23 = ::libc::c_uint;
pub const UHD_ASYNC_METADATA_EVENT_CODE_BURST_ACK: ::libc::c_uint = 1;
pub const UHD_ASYNC_METADATA_EVENT_CODE_UNDERFLOW: ::libc::c_uint = 2;
pub const UHD_ASYNC_METADATA_EVENT_CODE_SEQ_ERROR: ::libc::c_uint = 4;
pub const UHD_ASYNC_METADATA_EVENT_CODE_TIME_ERROR: ::libc::c_uint = 8;
pub const UHD_ASYNC_METADATA_EVENT_CODE_UNDERFLOW_IN_PACKET: ::libc::c_uint =
    16;
pub const UHD_ASYNC_METADATA_EVENT_CODE_SEQ_ERROR_IN_BURST: ::libc::c_uint =
    32;
pub const UHD_ASYNC_METADATA_EVENT_CODE_USER_PAYLOAD: ::libc::c_uint = 64;
pub type uhd_async_metadata_event_code_t = Enum_Unnamed23;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub start: ::libc::c_double,
    pub stop: ::libc::c_double,
    pub step: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uhd_range_t = Struct_Unnamed24;
pub enum Struct_uhd_meta_range_t { }
pub type uhd_meta_range_handle = *mut Struct_uhd_meta_range_t;
pub enum Struct_uhd_sensor_value_t { }
pub type uhd_sensor_value_handle = *mut Struct_uhd_sensor_value_t;
pub type Enum_Unnamed25 = ::libc::c_uint;
pub const UHD_SENSOR_VALUE_BOOLEAN: ::libc::c_uint = 98;
pub const UHD_SENSOR_VALUE_INTEGER: ::libc::c_uint = 105;
pub const UHD_SENSOR_VALUE_REALNUM: ::libc::c_uint = 114;
pub const UHD_SENSOR_VALUE_STRING: ::libc::c_uint = 115;
pub type uhd_sensor_value_data_type_t = Enum_Unnamed25;
pub enum Struct_uhd_string_vector_t { }
pub type uhd_string_vector_t = Struct_uhd_string_vector_t;
pub type uhd_string_vector_handle = *mut uhd_string_vector_t;
pub type Enum_Unnamed26 = ::libc::c_uint;
pub const UHD_TUNE_REQUEST_POLICY_NONE: ::libc::c_uint = 78;
pub const UHD_TUNE_REQUEST_POLICY_AUTO: ::libc::c_uint = 65;
pub const UHD_TUNE_REQUEST_POLICY_MANUAL: ::libc::c_uint = 77;
pub type uhd_tune_request_policy_t = Enum_Unnamed26;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed27 {
    pub target_freq: ::libc::c_double,
    pub rf_freq_policy: uhd_tune_request_policy_t,
    pub rf_freq: ::libc::c_double,
    pub dsp_freq_policy: uhd_tune_request_policy_t,
    pub dsp_freq: ::libc::c_double,
    pub args: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed27 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uhd_tune_request_t = Struct_Unnamed27;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed28 {
    pub clipped_rf_freq: ::libc::c_double,
    pub target_rf_freq: ::libc::c_double,
    pub actual_rf_freq: ::libc::c_double,
    pub target_dsp_freq: ::libc::c_double,
    pub actual_dsp_freq: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed28 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uhd_tune_result_t = Struct_Unnamed28;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed29 {
    pub mboard_id: *mut ::libc::c_char,
    pub mboard_name: *mut ::libc::c_char,
    pub mboard_serial: *mut ::libc::c_char,
    pub rx_id: *mut ::libc::c_char,
    pub rx_subdev_name: *mut ::libc::c_char,
    pub rx_subdev_spec: *mut ::libc::c_char,
    pub rx_serial: *mut ::libc::c_char,
    pub rx_antenna: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed29 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uhd_usrp_rx_info_t = Struct_Unnamed29;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed30 {
    pub mboard_id: *mut ::libc::c_char,
    pub mboard_name: *mut ::libc::c_char,
    pub mboard_serial: *mut ::libc::c_char,
    pub tx_id: *mut ::libc::c_char,
    pub tx_subdev_name: *mut ::libc::c_char,
    pub tx_subdev_spec: *mut ::libc::c_char,
    pub tx_serial: *mut ::libc::c_char,
    pub tx_antenna: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed30 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed30 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uhd_usrp_tx_info_t = Struct_Unnamed30;
pub enum Struct_uhd_dboard_eeprom_t { }
pub type uhd_dboard_eeprom_handle = *mut Struct_uhd_dboard_eeprom_t;
pub enum Struct_uhd_mboard_eeprom_t { }
pub type uhd_mboard_eeprom_handle = *mut Struct_uhd_mboard_eeprom_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed31 {
    pub db_name: *mut ::libc::c_char,
    pub sd_name: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed31 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed31 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uhd_subdev_spec_pair_t = Struct_Unnamed31;
pub enum Struct_uhd_subdev_spec_t { }
pub type uhd_subdev_spec_handle = *mut Struct_uhd_subdev_spec_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed32 {
    pub bitwidth: size_t,
    pub readable: u8,
    pub writable: u8,
}
impl ::std::clone::Clone for Struct_Unnamed32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uhd_usrp_register_info_t = Struct_Unnamed32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed33 {
    pub cpu_format: *mut ::libc::c_char,
    pub otw_format: *mut ::libc::c_char,
    pub args: *mut ::libc::c_char,
    pub channel_list: *mut size_t,
    pub n_channels: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed33 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed33 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uhd_stream_args_t = Struct_Unnamed33;
pub type Enum_Unnamed34 = ::libc::c_uint;
pub const UHD_STREAM_MODE_START_CONTINUOUS: ::libc::c_uint = 97;
pub const UHD_STREAM_MODE_STOP_CONTINUOUS: ::libc::c_uint = 111;
pub const UHD_STREAM_MODE_NUM_SAMPS_AND_DONE: ::libc::c_uint = 100;
pub const UHD_STREAM_MODE_NUM_SAMPS_AND_MORE: ::libc::c_uint = 109;
pub type uhd_stream_mode_t = Enum_Unnamed34;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed35 {
    pub stream_mode: uhd_stream_mode_t,
    pub num_samps: size_t,
    pub stream_now: u8,
    pub time_spec_full_secs: time_t,
    pub time_spec_frac_secs: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed35 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed35 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uhd_stream_cmd_t = Struct_Unnamed35;
pub enum Struct_uhd_rx_streamer { }
pub enum Struct_uhd_tx_streamer { }
pub type uhd_rx_streamer_handle = *mut Struct_uhd_rx_streamer;
pub type uhd_tx_streamer_handle = *mut Struct_uhd_tx_streamer;
pub enum Struct_uhd_usrp { }
pub type uhd_usrp_handle = *mut Struct_uhd_usrp;
pub enum Struct_uhd_usrp_clock { }
pub type uhd_usrp_clock_handle = *mut Struct_uhd_usrp_clock;
#[link(name = "uhd")]
extern "C" {
    pub static mut __tzname: [*mut ::libc::c_char; 2usize];
    pub static mut __daylight: ::libc::c_int;
    pub static mut __timezone: ::libc::c_long;
    pub static mut tzname: [*mut ::libc::c_char; 2usize];
    pub static mut daylight: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
}
#[link(name = "uhd")]
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(__nptr: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(__nptr: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(__nptr: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn strtod(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtof(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_float;
    pub fn strtold(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtol(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_long;
    pub fn strtoul(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoq(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtouq(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn strtoll(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoull(__nptr: *const ::libc::c_char,
                    __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn l64a(__n: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn a64l(__s: *const ::libc::c_char) -> ::libc::c_long;
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn random() -> ::libc::c_long;
    pub fn srandom(__seed: ::libc::c_uint) -> ();
    pub fn initstate(__seed: ::libc::c_uint, __statebuf: *mut ::libc::c_char,
                     __statelen: size_t) -> *mut ::libc::c_char;
    pub fn setstate(__statebuf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t)
     -> ::libc::c_int;
    pub fn srandom_r(__seed: ::libc::c_uint, __buf: *mut Struct_random_data)
     -> ::libc::c_int;
    pub fn initstate_r(__seed: ::libc::c_uint,
                       __statebuf: *mut ::libc::c_char, __statelen: size_t,
                       __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn setstate_r(__statebuf: *mut ::libc::c_char,
                      __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn rand() -> ::libc::c_int;
    pub fn srand(__seed: ::libc::c_uint) -> ();
    pub fn rand_r(__seed: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn drand48() -> ::libc::c_double;
    pub fn erand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn lrand48() -> ::libc::c_long;
    pub fn nrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn mrand48() -> ::libc::c_long;
    pub fn jrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn srand48(__seedval: ::libc::c_long) -> ();
    pub fn seed48(__seed16v: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn lcong48(__param: *mut ::libc::c_ushort) -> ();
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn erand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn jrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn srand48_r(__seedval: ::libc::c_long,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn seed48_r(__seed16v: *mut ::libc::c_ushort,
                    __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn lcong48_r(__param: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn malloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::libc::c_void;
    pub fn realloc(__ptr: *mut ::libc::c_void, __size: size_t)
     -> *mut ::libc::c_void;
    pub fn free(__ptr: *mut ::libc::c_void) -> ();
    pub fn cfree(__ptr: *mut ::libc::c_void) -> ();
    pub fn alloca(__size: size_t) -> *mut ::libc::c_void;
    pub fn valloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::libc::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::libc::c_int;
    pub fn abort() -> ();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::libc::c_int,
                                                                  __arg:
                                                                      *mut ::libc::c_void)
                                                 -> ()>,
                   __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn exit(__status: ::libc::c_int) -> ();
    pub fn _Exit(__status: ::libc::c_int) -> ();
    pub fn getenv(__name: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn putenv(__string: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn setenv(__name: *const ::libc::c_char,
                  __value: *const ::libc::c_char, __replace: ::libc::c_int)
     -> ::libc::c_int;
    pub fn unsetenv(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn clearenv() -> ::libc::c_int;
    pub fn mktemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(__template: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mkstemps(__template: *mut ::libc::c_char,
                    __suffixlen: ::libc::c_int) -> ::libc::c_int;
    pub fn mkdtemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn system(__command: *const ::libc::c_char) -> ::libc::c_int;
    pub fn realpath(__name: *const ::libc::c_char,
                    __resolved: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn bsearch(__key: *const ::libc::c_void,
                   __base: *const ::libc::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn qsort(__base: *mut ::libc::c_void, __nmemb: size_t, __size: size_t,
                 __compar: __compar_fn_t) -> ();
    pub fn abs(__x: ::libc::c_int) -> ::libc::c_int;
    pub fn labs(__x: ::libc::c_long) -> ::libc::c_long;
    pub fn llabs(__x: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn div(__numer: ::libc::c_int, __denom: ::libc::c_int) -> div_t;
    pub fn ldiv(__numer: ::libc::c_long, __denom: ::libc::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::libc::c_longlong, __denom: ::libc::c_longlong)
     -> lldiv_t;
    pub fn ecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn fcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn qecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qfcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qgcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn fcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn qecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn qfcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn mblen(__s: *const ::libc::c_char, __n: size_t) -> ::libc::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::libc::c_char,
                  __n: size_t) -> ::libc::c_int;
    pub fn wctomb(__s: *mut ::libc::c_char, __wchar: wchar_t)
     -> ::libc::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::libc::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::libc::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::libc::c_char,
                     __tokens: *const *mut ::libc::c_char,
                     __valuep: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn getloadavg(__loadavg: *mut ::libc::c_double,
                      __nelem: ::libc::c_int) -> ::libc::c_int;
    pub fn uhd_get_last_error(error_out: *mut ::libc::c_char,
                              strbuffer_len: size_t) -> uhd_error;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> ::libc::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::libc::c_char, __maxsize: size_t,
                    __format: *const ::libc::c_char, __tp: *const Struct_tm)
     -> size_t;
    pub fn strftime_l(__s: *mut ::libc::c_char, __maxsize: size_t,
                      __format: *const ::libc::c_char, __tp: *const Struct_tm,
                      __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::libc::c_char;
    pub fn asctime_r(__tp: *const Struct_tm, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn tzset() -> ();
    pub fn stime(__when: *const time_t) -> ::libc::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::libc::c_int) -> ::libc::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: ::libc::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::libc::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> ::libc::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::libc::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::libc::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec) -> ::libc::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> ::libc::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::libc::c_int;
    pub fn uhd_rx_metadata_make(handle: *mut uhd_rx_metadata_handle)
     -> uhd_error;
    pub fn uhd_rx_metadata_free(handle: *mut uhd_rx_metadata_handle)
     -> uhd_error;
    pub fn uhd_rx_metadata_has_time_spec(h: uhd_rx_metadata_handle,
                                         result_out: *mut u8) -> uhd_error;
    pub fn uhd_rx_metadata_time_spec(h: uhd_rx_metadata_handle,
                                     full_secs_out: *mut time_t,
                                     frac_secs_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_rx_metadata_more_fragments(h: uhd_rx_metadata_handle,
                                          result_out: *mut u8) -> uhd_error;
    pub fn uhd_rx_metadata_fragment_offset(h: uhd_rx_metadata_handle,
                                           fragment_offset_out: *mut size_t)
     -> uhd_error;
    pub fn uhd_rx_metadata_start_of_burst(h: uhd_rx_metadata_handle,
                                          result_out: *mut u8) -> uhd_error;
    pub fn uhd_rx_metadata_end_of_burst(h: uhd_rx_metadata_handle,
                                        result_out: *mut u8) -> uhd_error;
    pub fn uhd_rx_metadata_out_of_sequence(h: uhd_rx_metadata_handle,
                                           result_out: *mut u8) -> uhd_error;
    pub fn uhd_rx_metadata_to_pp_string(h: uhd_rx_metadata_handle,
                                        pp_string_out: *mut ::libc::c_char,
                                        strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_rx_metadata_error_code(h: uhd_rx_metadata_handle,
                                      error_code_out:
                                          *mut uhd_rx_metadata_error_code_t)
     -> uhd_error;
    pub fn uhd_rx_metadata_strerror(h: uhd_rx_metadata_handle,
                                    strerror_out: *mut ::libc::c_char,
                                    strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_rx_metadata_last_error(h: uhd_rx_metadata_handle,
                                      error_out: *mut ::libc::c_char,
                                      strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_tx_metadata_make(handle: *mut uhd_tx_metadata_handle,
                                has_time_spec: u8, full_secs: time_t,
                                frac_secs: ::libc::c_double,
                                start_of_burst: u8, end_of_burst: u8)
     -> uhd_error;
    pub fn uhd_tx_metadata_free(handle: *mut uhd_tx_metadata_handle)
     -> uhd_error;
    pub fn uhd_tx_metadata_has_time_spec(h: uhd_tx_metadata_handle,
                                         result_out: *mut u8) -> uhd_error;
    pub fn uhd_tx_metadata_time_spec(h: uhd_tx_metadata_handle,
                                     full_secs_out: *mut time_t,
                                     frac_secs_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_tx_metadata_start_of_burst(h: uhd_tx_metadata_handle,
                                          result_out: *mut u8) -> uhd_error;
    pub fn uhd_tx_metadata_end_of_burst(h: uhd_tx_metadata_handle,
                                        result_out: *mut u8) -> uhd_error;
    pub fn uhd_tx_metadata_last_error(h: uhd_tx_metadata_handle,
                                      error_out: *mut ::libc::c_char,
                                      strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_async_metadata_make(handle: *mut uhd_async_metadata_handle)
     -> uhd_error;
    pub fn uhd_async_metadata_free(handle: *mut uhd_async_metadata_handle)
     -> uhd_error;
    pub fn uhd_async_metadata_channel(h: uhd_async_metadata_handle,
                                      channel_out: *mut size_t) -> uhd_error;
    pub fn uhd_async_metadata_has_time_spec(h: uhd_async_metadata_handle,
                                            result_out: *mut u8) -> uhd_error;
    pub fn uhd_async_metadata_time_spec(h: uhd_async_metadata_handle,
                                        full_secs_out: *mut time_t,
                                        frac_secs_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_async_metadata_event_code(h: uhd_async_metadata_handle,
                                         event_code_out:
                                             *mut uhd_async_metadata_event_code_t)
     -> uhd_error;
    pub fn uhd_async_metadata_user_payload(h: uhd_async_metadata_handle,
                                           user_payload_out: *mut uint32_t)
     -> uhd_error;
    pub fn uhd_async_metadata_last_error(h: uhd_async_metadata_handle,
                                         error_out: *mut ::libc::c_char,
                                         strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_range_to_pp_string(range: *const uhd_range_t,
                                  pp_string_out: *mut ::libc::c_char,
                                  strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_meta_range_make(h: *mut uhd_meta_range_handle) -> uhd_error;
    pub fn uhd_meta_range_free(h: *mut uhd_meta_range_handle) -> uhd_error;
    pub fn uhd_meta_range_start(h: uhd_meta_range_handle,
                                start_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_meta_range_stop(h: uhd_meta_range_handle,
                               stop_out: *mut ::libc::c_double) -> uhd_error;
    pub fn uhd_meta_range_step(h: uhd_meta_range_handle,
                               step_out: *mut ::libc::c_double) -> uhd_error;
    pub fn uhd_meta_range_clip(h: uhd_meta_range_handle,
                               value: ::libc::c_double, clip_step: u8,
                               result_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_meta_range_size(h: uhd_meta_range_handle,
                               size_out: *mut size_t) -> uhd_error;
    pub fn uhd_meta_range_push_back(h: uhd_meta_range_handle,
                                    range: *const uhd_range_t) -> uhd_error;
    pub fn uhd_meta_range_at(h: uhd_meta_range_handle, num: size_t,
                             range_out: *mut uhd_range_t) -> uhd_error;
    pub fn uhd_meta_range_to_pp_string(h: uhd_meta_range_handle,
                                       pp_string_out: *mut ::libc::c_char,
                                       strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_meta_range_last_error(h: uhd_meta_range_handle,
                                     error_out: *mut ::libc::c_char,
                                     strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_sensor_value_make_from_bool(h: *mut uhd_sensor_value_handle,
                                           name: *const ::libc::c_char,
                                           value: u8,
                                           utrue: *const ::libc::c_char,
                                           ufalse: *const ::libc::c_char)
     -> uhd_error;
    pub fn uhd_sensor_value_make_from_int(h: *mut uhd_sensor_value_handle,
                                          name: *const ::libc::c_char,
                                          value: ::libc::c_int,
                                          unit: *const ::libc::c_char,
                                          formatter: *const ::libc::c_char)
     -> uhd_error;
    pub fn uhd_sensor_value_make_from_realnum(h: *mut uhd_sensor_value_handle,
                                              name: *const ::libc::c_char,
                                              value: ::libc::c_double,
                                              unit: *const ::libc::c_char,
                                              formatter:
                                                  *const ::libc::c_char)
     -> uhd_error;
    pub fn uhd_sensor_value_make_from_string(h: *mut uhd_sensor_value_handle,
                                             name: *const ::libc::c_char,
                                             value: *const ::libc::c_char,
                                             unit: *const ::libc::c_char)
     -> uhd_error;
    pub fn uhd_sensor_value_free(h: *mut uhd_sensor_value_handle)
     -> uhd_error;
    pub fn uhd_sensor_value_to_bool(h: uhd_sensor_value_handle,
                                    value_out: *mut u8) -> uhd_error;
    pub fn uhd_sensor_value_to_int(h: uhd_sensor_value_handle,
                                   value_out: *mut ::libc::c_int)
     -> uhd_error;
    pub fn uhd_sensor_value_to_realnum(h: uhd_sensor_value_handle,
                                       value_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_sensor_value_name(h: uhd_sensor_value_handle,
                                 name_out: *mut ::libc::c_char,
                                 strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_sensor_value_value(h: uhd_sensor_value_handle,
                                  value_out: *mut ::libc::c_char,
                                  strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_sensor_value_unit(h: uhd_sensor_value_handle,
                                 unit_out: *mut ::libc::c_char,
                                 strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_sensor_value_data_type(h: uhd_sensor_value_handle,
                                      data_type_out:
                                          *mut uhd_sensor_value_data_type_t)
     -> uhd_error;
    pub fn uhd_sensor_value_to_pp_string(h: uhd_sensor_value_handle,
                                         pp_string_out: *mut ::libc::c_char,
                                         strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_sensor_value_last_error(h: uhd_sensor_value_handle,
                                       error_out: *mut ::libc::c_char,
                                       strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_string_vector_make(h: *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_string_vector_free(h: *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_string_vector_push_back(h: *mut uhd_string_vector_handle,
                                       value: *const ::libc::c_char)
     -> uhd_error;
    pub fn uhd_string_vector_at(h: uhd_string_vector_handle, index: size_t,
                                value_out: *mut ::libc::c_char,
                                strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_string_vector_size(h: uhd_string_vector_handle,
                                  size_out: *mut size_t) -> uhd_error;
    pub fn uhd_string_vector_last_error(h: uhd_string_vector_handle,
                                        error_out: *mut ::libc::c_char,
                                        strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_tune_result_to_pp_string(tune_result: *mut uhd_tune_result_t,
                                        pp_string_out: *mut ::libc::c_char,
                                        strbuffer_len: size_t) -> ();
    pub fn uhd_usrp_rx_info_free(rx_info: *mut uhd_usrp_rx_info_t)
     -> uhd_error;
    pub fn uhd_usrp_tx_info_free(tx_info: *mut uhd_usrp_tx_info_t)
     -> uhd_error;
    pub fn uhd_dboard_eeprom_make(h: *mut uhd_dboard_eeprom_handle)
     -> uhd_error;
    pub fn uhd_dboard_eeprom_free(h: *mut uhd_dboard_eeprom_handle)
     -> uhd_error;
    pub fn uhd_dboard_eeprom_get_id(h: uhd_dboard_eeprom_handle,
                                    id_out: *mut ::libc::c_char,
                                    strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_dboard_eeprom_set_id(h: uhd_dboard_eeprom_handle,
                                    id: *const ::libc::c_char) -> uhd_error;
    pub fn uhd_dboard_eeprom_get_serial(h: uhd_dboard_eeprom_handle,
                                        serial_out: *mut ::libc::c_char,
                                        strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_dboard_eeprom_set_serial(h: uhd_dboard_eeprom_handle,
                                        serial: *const ::libc::c_char)
     -> uhd_error;
    pub fn uhd_dboard_eeprom_get_revision(h: uhd_dboard_eeprom_handle,
                                          revision_out: *mut ::libc::c_int)
     -> uhd_error;
    pub fn uhd_dboard_eeprom_set_revision(h: uhd_dboard_eeprom_handle,
                                          revision: ::libc::c_int)
     -> uhd_error;
    pub fn uhd_dboard_eeprom_last_error(h: uhd_dboard_eeprom_handle,
                                        error_out: *mut ::libc::c_char,
                                        strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_mboard_eeprom_make(h: *mut uhd_mboard_eeprom_handle)
     -> uhd_error;
    pub fn uhd_mboard_eeprom_free(h: *mut uhd_mboard_eeprom_handle)
     -> uhd_error;
    pub fn uhd_mboard_eeprom_get_value(h: uhd_mboard_eeprom_handle,
                                       key: *const ::libc::c_char,
                                       value_out: *mut ::libc::c_char,
                                       strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_mboard_eeprom_set_value(h: uhd_mboard_eeprom_handle,
                                       key: *const ::libc::c_char,
                                       value: *const ::libc::c_char)
     -> uhd_error;
    pub fn uhd_mboard_eeprom_last_error(h: uhd_mboard_eeprom_handle,
                                        error_out: *mut ::libc::c_char,
                                        strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_subdev_spec_pair_free(subdev_spec_pair:
                                         *mut uhd_subdev_spec_pair_t)
     -> uhd_error;
    pub fn uhd_subdev_spec_pairs_equal(first: *const uhd_subdev_spec_pair_t,
                                       second: *const uhd_subdev_spec_pair_t,
                                       result_out: *mut u8) -> uhd_error;
    pub fn uhd_subdev_spec_make(h: *mut uhd_subdev_spec_handle,
                                markup: *const ::libc::c_char) -> uhd_error;
    pub fn uhd_subdev_spec_free(h: *mut uhd_subdev_spec_handle) -> uhd_error;
    pub fn uhd_subdev_spec_size(h: uhd_subdev_spec_handle,
                                size_out: *mut size_t) -> uhd_error;
    pub fn uhd_subdev_spec_push_back(h: uhd_subdev_spec_handle,
                                     markup: *const ::libc::c_char)
     -> uhd_error;
    pub fn uhd_subdev_spec_at(h: uhd_subdev_spec_handle, num: size_t,
                              subdev_spec_pair_out:
                                  *mut uhd_subdev_spec_pair_t) -> uhd_error;
    pub fn uhd_subdev_spec_to_pp_string(h: uhd_subdev_spec_handle,
                                        pp_string_out: *mut ::libc::c_char,
                                        strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_subdev_spec_to_string(h: uhd_subdev_spec_handle,
                                     string_out: *mut ::libc::c_char,
                                     strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_subdev_spec_last_error(h: uhd_subdev_spec_handle,
                                      error_out: *mut ::libc::c_char,
                                      strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_rx_streamer_make(h: *mut uhd_rx_streamer_handle) -> uhd_error;
    pub fn uhd_rx_streamer_free(h: *mut uhd_rx_streamer_handle) -> uhd_error;
    pub fn uhd_rx_streamer_num_channels(h: uhd_rx_streamer_handle,
                                        num_channels_out: *mut size_t)
     -> uhd_error;
    pub fn uhd_rx_streamer_max_num_samps(h: uhd_rx_streamer_handle,
                                         max_num_samps_out: *mut size_t)
     -> uhd_error;
    pub fn uhd_rx_streamer_recv(h: uhd_rx_streamer_handle,
                                buffs: *mut *mut ::libc::c_void,
                                samps_per_buff: size_t,
                                md: *mut uhd_rx_metadata_handle,
                                timeout: ::libc::c_double, one_packet: u8,
                                items_recvd: *mut size_t) -> uhd_error;
    pub fn uhd_rx_streamer_issue_stream_cmd(h: uhd_rx_streamer_handle,
                                            stream_cmd:
                                                *const uhd_stream_cmd_t)
     -> uhd_error;
    pub fn uhd_rx_streamer_last_error(h: uhd_rx_streamer_handle,
                                      error_out: *mut ::libc::c_char,
                                      strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_tx_streamer_make(h: *mut uhd_tx_streamer_handle) -> uhd_error;
    pub fn uhd_tx_streamer_free(h: *mut uhd_tx_streamer_handle) -> uhd_error;
    pub fn uhd_tx_streamer_num_channels(h: uhd_tx_streamer_handle,
                                        num_channels_out: *mut size_t)
     -> uhd_error;
    pub fn uhd_tx_streamer_max_num_samps(h: uhd_tx_streamer_handle,
                                         max_num_samps_out: *mut size_t)
     -> uhd_error;
    pub fn uhd_tx_streamer_send(h: uhd_tx_streamer_handle,
                                buffs: *mut *const ::libc::c_void,
                                samps_per_buff: size_t,
                                md: *mut uhd_tx_metadata_handle,
                                timeout: ::libc::c_double,
                                items_sent: *mut size_t) -> uhd_error;
    pub fn uhd_tx_streamer_recv_async_msg(h: uhd_tx_streamer_handle,
                                          md: *mut uhd_async_metadata_handle,
                                          timeout: ::libc::c_double,
                                          valid: *mut u8) -> uhd_error;
    pub fn uhd_tx_streamer_last_error(h: uhd_tx_streamer_handle,
                                      error_out: *mut ::libc::c_char,
                                      strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_find(args: *const ::libc::c_char,
                         strings_out: *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_make(h: *mut uhd_usrp_handle, args: *const ::libc::c_char)
     -> uhd_error;
    pub fn uhd_usrp_free(h: *mut uhd_usrp_handle) -> uhd_error;
    pub fn uhd_usrp_last_error(h: uhd_usrp_handle,
                               error_out: *mut ::libc::c_char,
                               strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_get_rx_stream(h: uhd_usrp_handle,
                                  stream_args: *mut uhd_stream_args_t,
                                  h_out: uhd_rx_streamer_handle) -> uhd_error;
    pub fn uhd_usrp_get_tx_stream(h: uhd_usrp_handle,
                                  stream_args: *mut uhd_stream_args_t,
                                  h_out: uhd_tx_streamer_handle) -> uhd_error;
    pub fn uhd_usrp_get_rx_info(h: uhd_usrp_handle, chan: size_t,
                                info_out: *mut uhd_usrp_rx_info_t)
     -> uhd_error;
    pub fn uhd_usrp_get_tx_info(h: uhd_usrp_handle, chan: size_t,
                                info_out: *mut uhd_usrp_tx_info_t)
     -> uhd_error;
    pub fn uhd_usrp_set_master_clock_rate(h: uhd_usrp_handle,
                                          rate: ::libc::c_double,
                                          mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_get_master_clock_rate(h: uhd_usrp_handle, mboard: size_t,
                                          clock_rate_out:
                                              *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_usrp_get_pp_string(h: uhd_usrp_handle,
                                  pp_string_out: *mut ::libc::c_char,
                                  strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_get_mboard_name(h: uhd_usrp_handle, mboard: size_t,
                                    mboard_name_out: *mut ::libc::c_char,
                                    strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_get_time_now(h: uhd_usrp_handle, mboard: size_t,
                                 full_secs_out: *mut time_t,
                                 frac_secs_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_usrp_get_time_last_pps(h: uhd_usrp_handle, mboard: size_t,
                                      full_secs_out: *mut time_t,
                                      frac_secs_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_usrp_set_time_now(h: uhd_usrp_handle, full_secs: time_t,
                                 frac_secs: ::libc::c_double, mboard: size_t)
     -> uhd_error;
    pub fn uhd_usrp_set_time_next_pps(h: uhd_usrp_handle, full_secs: time_t,
                                      frac_secs: ::libc::c_double,
                                      mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_set_time_unknown_pps(h: uhd_usrp_handle,
                                         full_secs: time_t,
                                         frac_secs: ::libc::c_double)
     -> uhd_error;
    pub fn uhd_usrp_get_time_synchronized(h: uhd_usrp_handle,
                                          result_out: *mut u8) -> uhd_error;
    pub fn uhd_usrp_set_command_time(h: uhd_usrp_handle, full_secs: time_t,
                                     frac_secs: ::libc::c_double,
                                     mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_clear_command_time(h: uhd_usrp_handle, mboard: size_t)
     -> uhd_error;
    pub fn uhd_usrp_set_time_source(h: uhd_usrp_handle,
                                    time_source: *const ::libc::c_char,
                                    mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_get_time_source(h: uhd_usrp_handle, mboard: size_t,
                                    time_source_out: *mut ::libc::c_char,
                                    strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_get_time_sources(h: uhd_usrp_handle, mboard: size_t,
                                     time_sources_out:
                                         *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_clock_source(h: uhd_usrp_handle,
                                     clock_source: *const ::libc::c_char,
                                     mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_get_clock_source(h: uhd_usrp_handle, mboard: size_t,
                                     clock_source_out: *mut ::libc::c_char,
                                     strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_get_clock_sources(h: uhd_usrp_handle, mboard: size_t,
                                      clock_sources_out:
                                          *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_clock_source_out(h: uhd_usrp_handle, enb: u8,
                                         mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_set_time_source_out(h: uhd_usrp_handle, enb: u8,
                                        mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_get_num_mboards(h: uhd_usrp_handle,
                                    num_mboards_out: *mut size_t)
     -> uhd_error;
    pub fn uhd_usrp_get_mboard_sensor(h: uhd_usrp_handle,
                                      name: *const ::libc::c_char,
                                      mboard: size_t,
                                      sensor_value_out:
                                          *mut uhd_sensor_value_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_mboard_sensor_names(h: uhd_usrp_handle,
                                            mboard: size_t,
                                            mboard_sensor_names_out:
                                                *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_user_register(h: uhd_usrp_handle, addr: uint8_t,
                                      data: uint32_t, mboard: size_t)
     -> uhd_error;
    pub fn uhd_usrp_get_mboard_eeprom(h: uhd_usrp_handle,
                                      mb_eeprom: uhd_mboard_eeprom_handle,
                                      mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_set_mboard_eeprom(h: uhd_usrp_handle,
                                      mb_eeprom: uhd_mboard_eeprom_handle,
                                      mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_get_dboard_eeprom(h: uhd_usrp_handle,
                                      db_eeprom: uhd_dboard_eeprom_handle,
                                      unit: *const ::libc::c_char,
                                      slot: *const ::libc::c_char,
                                      mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_set_dboard_eeprom(h: uhd_usrp_handle,
                                      db_eeprom: uhd_dboard_eeprom_handle,
                                      unit: *const ::libc::c_char,
                                      slot: *const ::libc::c_char,
                                      mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_set_rx_subdev_spec(h: uhd_usrp_handle,
                                       subdev_spec: uhd_subdev_spec_handle,
                                       mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_get_rx_subdev_spec(h: uhd_usrp_handle, mboard: size_t,
                                       subdev_spec_out:
                                           uhd_subdev_spec_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_rx_num_channels(h: uhd_usrp_handle,
                                        num_channels_out: *mut size_t)
     -> uhd_error;
    pub fn uhd_usrp_get_rx_subdev_name(h: uhd_usrp_handle, chan: size_t,
                                       rx_subdev_name_out:
                                           *mut ::libc::c_char,
                                       strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_set_rx_rate(h: uhd_usrp_handle, rate: ::libc::c_double,
                                chan: size_t) -> uhd_error;
    pub fn uhd_usrp_get_rx_rate(h: uhd_usrp_handle, chan: size_t,
                                rate_out: *mut ::libc::c_double) -> uhd_error;
    pub fn uhd_usrp_get_rx_rates(h: uhd_usrp_handle, chan: size_t,
                                 rates_out: uhd_meta_range_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_rx_freq(h: uhd_usrp_handle,
                                tune_request: *mut uhd_tune_request_t,
                                chan: size_t,
                                tune_result: *mut uhd_tune_result_t)
     -> uhd_error;
    pub fn uhd_usrp_get_rx_freq(h: uhd_usrp_handle, chan: size_t,
                                freq_out: *mut ::libc::c_double) -> uhd_error;
    pub fn uhd_usrp_get_rx_freq_range(h: uhd_usrp_handle, chan: size_t,
                                      freq_range_out: uhd_meta_range_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_fe_rx_freq_range(h: uhd_usrp_handle, chan: size_t,
                                         freq_range_out:
                                             uhd_meta_range_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_rx_gain(h: uhd_usrp_handle, gain: ::libc::c_double,
                                chan: size_t,
                                gain_name: *const ::libc::c_char)
     -> uhd_error;
    pub fn uhd_usrp_set_normalized_rx_gain(h: uhd_usrp_handle,
                                           gain: ::libc::c_double,
                                           chan: size_t) -> uhd_error;
    pub fn uhd_usrp_set_rx_agc(h: uhd_usrp_handle, enable: u8, chan: size_t)
     -> uhd_error;
    pub fn uhd_usrp_get_rx_gain(h: uhd_usrp_handle, chan: size_t,
                                gain_name: *const ::libc::c_char,
                                gain_out: *mut ::libc::c_double) -> uhd_error;
    pub fn uhd_usrp_get_normalized_rx_gain(h: uhd_usrp_handle, chan: size_t,
                                           gain_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_usrp_get_rx_gain_range(h: uhd_usrp_handle,
                                      name: *const ::libc::c_char,
                                      chan: size_t,
                                      gain_range_out: uhd_meta_range_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_rx_gain_names(h: uhd_usrp_handle, chan: size_t,
                                      gain_names_out:
                                          *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_rx_antenna(h: uhd_usrp_handle,
                                   ant: *const ::libc::c_char, chan: size_t)
     -> uhd_error;
    pub fn uhd_usrp_get_rx_antenna(h: uhd_usrp_handle, chan: size_t,
                                   ant_out: *mut ::libc::c_char,
                                   strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_get_rx_antennas(h: uhd_usrp_handle, chan: size_t,
                                    antennas_out:
                                        *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_rx_sensor_names(h: uhd_usrp_handle, chan: size_t,
                                        sensor_names_out:
                                            *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_rx_bandwidth(h: uhd_usrp_handle,
                                     bandwidth: ::libc::c_double,
                                     chan: size_t) -> uhd_error;
    pub fn uhd_usrp_get_rx_bandwidth(h: uhd_usrp_handle, chan: size_t,
                                     bandwidth_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_usrp_get_rx_bandwidth_range(h: uhd_usrp_handle, chan: size_t,
                                           bandwidth_range_out:
                                               uhd_meta_range_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_rx_sensor(h: uhd_usrp_handle,
                                  name: *const ::libc::c_char, chan: size_t,
                                  sensor_value_out:
                                      *mut uhd_sensor_value_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_rx_dc_offset_enabled(h: uhd_usrp_handle, enb: u8,
                                             chan: size_t) -> uhd_error;
    pub fn uhd_usrp_set_rx_iq_balance_enabled(h: uhd_usrp_handle, enb: u8,
                                              chan: size_t) -> uhd_error;
    pub fn uhd_usrp_set_tx_subdev_spec(h: uhd_usrp_handle,
                                       subdev_spec: uhd_subdev_spec_handle,
                                       mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_get_tx_subdev_spec(h: uhd_usrp_handle, mboard: size_t,
                                       subdev_spec_out:
                                           uhd_subdev_spec_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_tx_num_channels(h: uhd_usrp_handle,
                                        num_channels_out: *mut size_t)
     -> uhd_error;
    pub fn uhd_usrp_get_tx_subdev_name(h: uhd_usrp_handle, chan: size_t,
                                       tx_subdev_name_out:
                                           *mut ::libc::c_char,
                                       strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_set_tx_rate(h: uhd_usrp_handle, rate: ::libc::c_double,
                                chan: size_t) -> uhd_error;
    pub fn uhd_usrp_get_tx_rate(h: uhd_usrp_handle, chan: size_t,
                                rate_out: *mut ::libc::c_double) -> uhd_error;
    pub fn uhd_usrp_get_tx_rates(h: uhd_usrp_handle, chan: size_t,
                                 rates_out: uhd_meta_range_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_tx_freq(h: uhd_usrp_handle,
                                tune_request: *mut uhd_tune_request_t,
                                chan: size_t,
                                tune_result: *mut uhd_tune_result_t)
     -> uhd_error;
    pub fn uhd_usrp_get_tx_freq(h: uhd_usrp_handle, chan: size_t,
                                freq_out: *mut ::libc::c_double) -> uhd_error;
    pub fn uhd_usrp_get_tx_freq_range(h: uhd_usrp_handle, chan: size_t,
                                      freq_range_out: uhd_meta_range_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_fe_tx_freq_range(h: uhd_usrp_handle, chan: size_t,
                                         freq_range_out:
                                             uhd_meta_range_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_tx_gain(h: uhd_usrp_handle, gain: ::libc::c_double,
                                chan: size_t,
                                gain_name: *const ::libc::c_char)
     -> uhd_error;
    pub fn uhd_usrp_set_normalized_tx_gain(h: uhd_usrp_handle,
                                           gain: ::libc::c_double,
                                           chan: size_t) -> uhd_error;
    pub fn uhd_usrp_get_tx_gain_range(h: uhd_usrp_handle,
                                      name: *const ::libc::c_char,
                                      chan: size_t,
                                      gain_range_out: uhd_meta_range_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_tx_gain(h: uhd_usrp_handle, chan: size_t,
                                gain_name: *const ::libc::c_char,
                                gain_out: *mut ::libc::c_double) -> uhd_error;
    pub fn uhd_usrp_get_normalized_tx_gain(h: uhd_usrp_handle, chan: size_t,
                                           gain_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_usrp_get_tx_gain_names(h: uhd_usrp_handle, chan: size_t,
                                      gain_names_out:
                                          *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_tx_antenna(h: uhd_usrp_handle,
                                   ant: *const ::libc::c_char, chan: size_t)
     -> uhd_error;
    pub fn uhd_usrp_get_tx_antenna(h: uhd_usrp_handle, chan: size_t,
                                   ant_out: *mut ::libc::c_char,
                                   strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_get_tx_antennas(h: uhd_usrp_handle, chan: size_t,
                                    antennas_out:
                                        *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_tx_bandwidth(h: uhd_usrp_handle,
                                     bandwidth: ::libc::c_double,
                                     chan: size_t) -> uhd_error;
    pub fn uhd_usrp_get_tx_bandwidth(h: uhd_usrp_handle, chan: size_t,
                                     bandwidth_out: *mut ::libc::c_double)
     -> uhd_error;
    pub fn uhd_usrp_get_tx_bandwidth_range(h: uhd_usrp_handle, chan: size_t,
                                           bandwidth_range_out:
                                               uhd_meta_range_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_tx_sensor(h: uhd_usrp_handle,
                                  name: *const ::libc::c_char, chan: size_t,
                                  sensor_value_out:
                                      *mut uhd_sensor_value_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_tx_sensor_names(h: uhd_usrp_handle, chan: size_t,
                                        sensor_names_out:
                                            *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_tx_dc_offset_enabled(h: uhd_usrp_handle, enb: u8,
                                             chan: size_t) -> uhd_error;
    pub fn uhd_usrp_set_tx_iq_balance_enabled(h: uhd_usrp_handle, enb: u8,
                                              chan: size_t) -> uhd_error;
    pub fn uhd_usrp_get_gpio_banks(h: uhd_usrp_handle, mboard: size_t,
                                   gpio_banks_out:
                                       *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_set_gpio_attr(h: uhd_usrp_handle,
                                  bank: *const ::libc::c_char,
                                  attr: *const ::libc::c_char,
                                  value: uint32_t, mask: uint32_t,
                                  mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_get_gpio_attr(h: uhd_usrp_handle,
                                  bank: *const ::libc::c_char,
                                  attr: *const ::libc::c_char, mboard: size_t,
                                  attr_out: *mut uint32_t) -> uhd_error;
    pub fn uhd_usrp_enumerate_registers(h: uhd_usrp_handle, mboard: size_t,
                                        registers_out:
                                            *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_usrp_get_register_info(h: uhd_usrp_handle,
                                      path: *const ::libc::c_char,
                                      mboard: size_t,
                                      register_info_out:
                                          *mut uhd_usrp_register_info_t)
     -> uhd_error;
    pub fn uhd_usrp_write_register(h: uhd_usrp_handle,
                                   path: *const ::libc::c_char,
                                   field: uint32_t, value: uint64_t,
                                   mboard: size_t) -> uhd_error;
    pub fn uhd_usrp_read_register(h: uhd_usrp_handle,
                                  path: *const ::libc::c_char,
                                  field: uint32_t, mboard: size_t,
                                  value_out: *mut uint64_t) -> uhd_error;
    pub fn uhd_usrp_clock_find(args: *const ::libc::c_char,
                               devices_out: *mut uhd_string_vector_t)
     -> uhd_error;
    pub fn uhd_usrp_clock_make(h: *mut uhd_usrp_clock_handle,
                               args: *const ::libc::c_char) -> uhd_error;
    pub fn uhd_usrp_clock_free(h: *mut uhd_usrp_clock_handle) -> uhd_error;
    pub fn uhd_usrp_clock_last_error(h: uhd_usrp_clock_handle,
                                     error_out: *mut ::libc::c_char,
                                     strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_clock_get_pp_string(h: uhd_usrp_clock_handle,
                                        pp_string_out: *mut ::libc::c_char,
                                        strbuffer_len: size_t) -> uhd_error;
    pub fn uhd_usrp_clock_get_num_boards(h: uhd_usrp_clock_handle,
                                         num_boards_out: *mut size_t)
     -> uhd_error;
    pub fn uhd_usrp_clock_get_time(h: uhd_usrp_clock_handle, board: size_t,
                                   clock_time_out: *mut uint32_t)
     -> uhd_error;
    pub fn uhd_usrp_clock_get_sensor(h: uhd_usrp_clock_handle,
                                     name: *const ::libc::c_char,
                                     board: size_t,
                                     sensor_value_out:
                                         *mut uhd_sensor_value_handle)
     -> uhd_error;
    pub fn uhd_usrp_clock_get_sensor_names(h: uhd_usrp_clock_handle,
                                           board: size_t,
                                           sensor_names_out:
                                               *mut uhd_string_vector_handle)
     -> uhd_error;
    pub fn uhd_set_thread_priority(priority: ::libc::c_float, realtime: u8)
     -> uhd_error;
}
